{"ast":null,"code":"var _jsxFileName = \"/Users/tomsta/Google Drive/product-feedback-app/src/components/layout/buttons/upvote-btn/upvote.js\";\nimport React, { useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport \"./upvote.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst STYLES = [\"btn-upvote-icon\", \"btn-upvote-solid\"];\n\nconst Upvote = ({\n  children,\n  type,\n  buttonStyle\n}) => {\n  const checkButtonStyle = STYLES.includes(buttonStyle) ? buttonStyle : STYLES[0];\n  return /*#__PURE__*/_jsxDEV(Button, {\n    onClick: props.onClickFunc,\n    className: `btn ${checkButtonStyle}`,\n    disableRipple: \"true\",\n    type: type,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Upvote;\nexport default Upvote;\n\nvar _c;\n\n$RefreshReg$(_c, \"Upvote\");","map":{"version":3,"sources":["/Users/tomsta/Google Drive/product-feedback-app/src/components/layout/buttons/upvote-btn/upvote.js"],"names":["React","useState","Button","STYLES","Upvote","children","type","buttonStyle","checkButtonStyle","includes","props","onClickFunc"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAO,eAAP;;AAEA,MAAMC,MAAM,GAAG,CAAC,iBAAD,EAAoB,kBAApB,CAAf;;AAEA,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,IAAZ;AAAkBC,EAAAA;AAAlB,CAAD,KAAqC;AAClD,QAAMC,gBAAgB,GAAGL,MAAM,CAACM,QAAP,CAAgBF,WAAhB,IACrBA,WADqB,GAErBJ,MAAM,CAAC,CAAD,CAFV;AAIA,sBACE,QAAC,MAAD;AACE,IAAA,OAAO,EAAEO,KAAK,CAACC,WADjB;AAEE,IAAA,SAAS,EAAG,OAAMH,gBAAiB,EAFrC;AAGE,IAAA,aAAa,EAAC,MAHhB;AAIE,IAAA,IAAI,EAAEF,IAJR;AAAA,cAMGD;AANH;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CAfD;;KAAMD,M;AAiBN,eAAeA,MAAf","sourcesContent":["import React, { useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport \"./upvote.scss\";\n\nconst STYLES = [\"btn-upvote-icon\", \"btn-upvote-solid\"];\n\nconst Upvote = ({ children, type, buttonStyle }) => {\n  const checkButtonStyle = STYLES.includes(buttonStyle)\n    ? buttonStyle\n    : STYLES[0];\n\n  return (\n    <Button\n      onClick={props.onClickFunc}\n      className={`btn ${checkButtonStyle}`}\n      disableRipple=\"true\"\n      type={type}\n    >\n      {children}\n    </Button>\n  );\n};\n\nexport default Upvote;\n"]},"metadata":{},"sourceType":"module"}